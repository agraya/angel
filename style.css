import {
  S3Client,
  ListObjectsV2Command,
  CopyObjectCommand
} from "@aws-sdk/client-s3";

import {
  SESClient,
  SendEmailCommand
} from "@aws-sdk/client-ses";

const s3 = new S3Client({});
const ses = new SESClient({});

const DEV_BUCKET = process.env.DEV_BUCKET;
const PROD_BUCKET = process.env.PROD_BUCKET;
const FROM_EMAIL = process.env.NOTIFY_FROM_EMAIL;
const TO_EMAIL = process.env.NOTIFY_TO_EMAIL;

export const handler = async (event) => {
  const method = event.requestContext.http.method;
  const path = event.rawPath;

  // POST /sync の処理
  if (method === 'POST' && path === '/sync') {
    const devObjects = await s3.send(new ListObjectsV2Command({ Bucket: DEV_BUCKET }));
    const prodObjects = await s3.send(new ListObjectsV2Command({ Bucket: PROD_BUCKET }));

    const devFiles = devObjects.Contents || [];
    const prodMap = new Map((prodObjects.Contents || []).map(obj => [obj.Key, new Date(obj.LastModified)]));

    const toSync = devFiles.filter(obj => {
      const prodLastModified = prodMap.get(obj.Key);
      return !prodLastModified || new Date(obj.LastModified) > prodLastModified;
    });

    const copiedKeys = [];

    for (const file of toSync) {
      await s3.send(new CopyObjectCommand({
        Bucket: PROD_BUCKET,
        Key: file.Key,
        CopySource: `${DEV_BUCKET}/${encodeURIComponent(file.Key)}`
      }));
      copiedKeys.push(file.Key);
    }

    // ✅ メール通知
    if (FROM_EMAIL && TO_EMAIL) {
      const subject = `S3同期完了: ${copiedKeys.length} 件のファイルが同期されました`;
      const bodyText = copiedKeys.length === 0
        ? '同期対象のファイルはありませんでした。'
        : `以下のファイルが同期されました：\n\n${copiedKeys.join('\n')}`;

      const emailParams = {
        Source: FROM_EMAIL,
        Destination: { ToAddresses: [TO_EMAIL] },
        Message: {
          Subject: { Data: subject },
          Body: {
            Text: { Data: bodyText }
          }
        }
      };

      try {
        await ses.send(new SendEmailCommand(emailParams));
      } catch (err) {
        console.error("メール送信エラー:", err);
      }
    }

    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({ syncCount: copiedKeys.length })
    };
  }

  return {
    statusCode: 404,
    body: 'Not Found'
  };
};
