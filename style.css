import {
  S3Client,
  ListObjectsV2Command,
  CopyObjectCommand
} from "@aws-sdk/client-s3";
import {
  SESClient,
  SendEmailCommand
} from "@aws-sdk/client-ses";

const s3 = new S3Client({});
const ses = new SESClient({});

const DEV_BUCKET = process.env.DEV_BUCKET;
const PROD_BUCKET = process.env.PROD_BUCKET;
const NOTIFY_EMAIL = process.env.NOTIFY_EMAIL;

export const handler = async (event) => {
  const method = event.requestContext.http.method;
  const path = event.rawPath;
  const query = event.queryStringParameters || {};
  const dryRun = query.dryRun === 'true';

  // 除外キーの処理
  let excludeKeys = [];
  if (method === 'GET' && path === '/sync') {
    const raw = event.rawQueryString || '';
    const params = new URLSearchParams(raw);
    excludeKeys = params.getAll('exclude');
  } else if (method === 'POST' && path === '/sync') {
    try {
      const body = JSON.parse(event.body);
      excludeKeys = Array.isArray(body.exclude) ? body.exclude : [];
    } catch (_) {}
  }

  // オブジェクト一覧取得
  const devObjects = await s3.send(new ListObjectsV2Command({ Bucket: DEV_BUCKET }));
  const prodObjects = await s3.send(new ListObjectsV2Command({ Bucket: PROD_BUCKET }));

  const devFiles = devObjects.Contents || [];
  const prodMap = new Map((prodObjects.Contents || []).map(obj => [obj.Key, new Date(obj.LastModified)]));

  // 差分抽出（除外含む）
  const toSync = devFiles.filter(obj => {
    if (excludeKeys.includes(obj.Key)) return false;
    const prodLastModified = prodMap.get(obj.Key);
    return !prodLastModified || new Date(obj.LastModified) > prodLastModified;
  });

  // ドライラン
  if (method === 'GET' && path === '/sync' && dryRun) {
    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
      body: JSON.stringify({
        files: toSync.map(obj => ({
          key: obj.Key,
          lastModified: obj.LastModified,
          size: obj.Size
        }))
      })
    };
  }

  // 本同期（POST）
  if (method === 'POST' && path === '/sync') {
    const copiedKeys = [];

    for (const file of toSync) {
      await s3.send(new CopyObjectCommand({
        Bucket: PROD_BUCKET,
        Key: file.Key,
        CopySource: `${DEV_BUCKET}/${encodeURIComponent(file.Key)}`
      }));
      copiedKeys.push(file.Key);
    }

    // ✅ メール送信
    if (NOTIFY_EMAIL && copiedKeys.length > 0) {
      const subject = `S3同期完了通知 (${copiedKeys.length}件)`;
      const bodyText = `以下のファイルが同期されました：\n\n${copiedKeys.join('\n')}`;

      const emailParams = {
        Destination: { ToAddresses: [NOTIFY_EMAIL] },
        Message: {
          Subject: { Data: subject },
          Body: {
            Text: { Data: bodyText }
          }
        },
        Source: NOTIFY_EMAIL // SESで認証済みである必要あり
      };

      try {
        await ses.send(new SendEmailCommand(emailParams));
      } catch (err) {
        console.error('メール送信失敗:', err);
      }
    }

    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },
      body: JSON.stringify({ syncCount: copiedKeys.length })
    };
  }

  // 不正なパス
  return {
    statusCode: 404,
    body: 'Not Found'
  };
};
