import { S3Client, ListObjectsV2Command, CopyObjectCommand } from "@aws-sdk/client-s3";
import { SESClient, SendEmailCommand } from "@aws-sdk/client-ses";

const s3 = new S3Client({ region: "ap-northeast-1" });
const ses = new SESClient({ region: "ap-northeast-1" });

const DEV_BUCKET = process.env.DEV_BUCKET;
const PROD_BUCKET = process.env.PROD_BUCKET;
const NOTIFY_EMAIL = process.env.NOTIFY_EMAIL;

export const handler = async (event) => {
  try {
    const devRes = await s3.send(new ListObjectsV2Command({ Bucket: DEV_BUCKET }));
    const prodRes = await s3.send(new ListObjectsV2Command({ Bucket: PROD_BUCKET }));

    const prodMap = {};
    (prodRes.Contents || []).forEach(o => prodMap[o.Key] = new Date(o.LastModified));

    const toCopy = (devRes.Contents || []).filter(obj => {
      const prodDate = prodMap[obj.Key];
      return !prodDate || new Date(obj.LastModified) > prodDate;
    });

    const copyPromises = toCopy.map(obj =>
      s3.send(new CopyObjectCommand({
        Bucket: PROD_BUCKET,
        CopySource: `${DEV_BUCKET}/${encodeURIComponent(obj.Key)}`,
        Key: obj.Key,
      }))
    );

    await Promise.all(copyPromises);

    if (NOTIFY_EMAIL && toCopy.length > 0) {
      const subject = `S3同期完了 - ${toCopy.length} 件のファイルが同期されました`;
      const bodyText = toCopy.map(f => f.Key).join('\n');

      try {
        await ses.send(new SendEmailCommand({
          Source: NOTIFY_EMAIL,
          Destination: { ToAddresses: [NOTIFY_EMAIL] },
          Message: {
            Subject: { Data: subject },
            Body: { Text: { Data: bodyText } }
          }
        }));
      } catch (emailErr) {
        console.error('メール送信エラー:', emailErr);
      }
    }

    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ syncCount: toCopy.length }),
    };
  } catch (err) {
    console.error('同期エラー:', err);
    return {
      statusCode: 500,
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ error: err.message }),
    };
  }
};
