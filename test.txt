// sync.mjs
import { S3Client, ListObjectsV2Command, CopyObjectCommand } from "@aws-sdk/client-s3";

const s3 = new S3Client({});
const DEV_BUCKET = process.env.DEV_BUCKET;
const PROD_BUCKET = process.env.PROD_BUCKET;

export const handler = async (event) => {
  const query = event.queryStringParameters || {};
  const dryRun = query.dryRun === 'true';
  const exclude = (query.exclude || '').split(',').map(x => x.trim()).filter(Boolean);

  const listObjects = async (Bucket) => {
    let Contents = [];
    let ContinuationToken;
    do {
      const res = await s3.send(new ListObjectsV2Command({ Bucket, ContinuationToken }));
      Contents = Contents.concat(res.Contents || []);
      ContinuationToken = res.IsTruncated ? res.NextContinuationToken : undefined;
    } while (ContinuationToken);
    return Contents;
  };

  const devObjects = await listObjects(DEV_BUCKET);
  const prodObjects = await listObjects(PROD_BUCKET);

  const prodMap = {};
  for (const o of prodObjects) {
    prodMap[o.Key] = new Date(o.LastModified);
  }

  const toCopy = devObjects.filter(obj => {
    if (exclude.some(prefix => obj.Key.startsWith(prefix))) return false;
    const prodDate = prodMap[obj.Key];
    return !prodDate || new Date(obj.LastModified) > prodDate;
  });

  if (dryRun) {
    return {
      statusCode: 200,
      headers: {
        'Access-Control-Allow-Origin': '*'
      },
      body: JSON.stringify({
        files: toCopy.map(obj => ({
          key: obj.Key,
          lastModified: obj.LastModified,
          size: obj.Size
        }))
      })
    };
  }

  // 本同期
  const copyPromises = toCopy.map(obj =>
    s3.send(new CopyObjectCommand({
      Bucket: PROD_BUCKET,
      CopySource: `${DEV_BUCKET}/${encodeURIComponent(obj.Key)}`,
      Key: obj.Key
    }))
  );

  await Promise.all(copyPromises);

  return {
    statusCode: 200,
    headers: {
      'Access-Control-Allow-Origin': '*'
    },
    body: JSON.stringify({ syncCount: toCopy.length })
  };
};

















// adminPageLambda.js
exports.handler = async () => {
  const html = `
<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <title>S3 同期管理画面</title>
  <style>
    body { font-family: sans-serif; max-width: 700px; margin: 2em auto; }
    button { margin: 0.5em 0; padding: 0.5em 1em; }
    input, label { display: block; margin-top: 1em; }
    table { border-collapse: collapse; width: 100%; margin-top: 1em; }
    th, td { border: 1px solid #ccc; padding: 0.5em; text-align: left; }
  </style>
</head>
<body>
  <h1>S3 バケット同期管理画面</h1>

  <label>
    除外ディレクトリ（カンマ区切り）:
    <input type="text" id="excludeDirs" placeholder="例: logs/,temp/" />
  </label>

  <button id="dryRunBtn">ドライラン実行（同期予定のファイルを表示）</button>
  <button id="syncBtn" disabled>本同期実行</button>

  <div id="status"></div>

  <table id="fileTable" style="display:none;">
    <thead>
      <tr>
        <th>ファイル名</th>
        <th>最終更新日時</th>
        <th>サイズ (bytes)</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <script>
    const dryRunBtn = document.getElementById('dryRunBtn');
    const syncBtn = document.getElementById('syncBtn');
    const statusDiv = document.getElementById('status');
    const fileTable = document.getElementById('fileTable');
    const tbody = fileTable.querySelector('tbody');
    const excludeInput = document.getElementById('excludeDirs');

    let lastDryRunFiles = [];
    let excludeQuery = '';

    dryRunBtn.onclick = async () => {
      statusDiv.textContent = 'ドライラン中…';
      fileTable.style.display = 'none';
      syncBtn.disabled = true;

      excludeQuery = encodeURIComponent(excludeInput.value.trim());

      try {
        const res = await fetch('/sync?dryRun=true&exclude=' + excludeQuery);
        if (!res.ok) throw new Error('APIエラー: ' + res.status);
        const data = await res.json();
        lastDryRunFiles = Array.isArray(data.files) ? data.files : [];

        if (lastDryRunFiles.length === 0) {
          statusDiv.textContent = '同期するファイルはありません。';
          fileTable.style.display = 'none';
          syncBtn.disabled = true;
          return;
        }

        statusDiv.textContent = \`同期予定のファイル数: \${lastDryRunFiles.length}\`;
        tbody.innerHTML = '';
        for (const file of lastDryRunFiles) {
          const tr = document.createElement('tr');
          const lastMod = file.lastModified ? new Date(file.lastModified) : null;
          tr.innerHTML =
            '<td>' + (file.key || '') + '</td>' +
            '<td>' + (lastMod ? lastMod.toLocaleString() : '不明') + '</td>' +
            '<td>' + (file.size != null ? file.size : '') + '</td>';
          tbody.appendChild(tr);
        }
        fileTable.style.display = '';
        syncBtn.disabled = false;
      } catch (e) {
        statusDiv.textContent = 'ドライランに失敗しました: ' + e.message;
        syncBtn.disabled = true;
        fileTable.style.display = 'none';
      }
    };

    syncBtn.onclick = async () => {
      if (lastDryRunFiles.length === 0) {
        alert('同期予定ファイルがありません。まずドライランを実行してください。');
        return;
      }
      if (!confirm(\`本同期を実行します。\${lastDryRunFiles.length} 件のファイルが同期されます。よろしいですか？\`)) {
        return;
      }

      statusDiv.textContent = '本同期実行中…';
      syncBtn.disabled = true;
      dryRunBtn.disabled = true;

      try {
        const res = await fetch('/sync?exclude=' + excludeQuery, { method: 'POST' });
        if (!res.ok) throw new Error('APIエラー: ' + res.status);
        const data = await res.json();

        statusDiv.textContent = \`本同期完了。同期したファイル数: \${data.syncCount}\`;
        fileTable.style.display = 'none';
        lastDryRunFiles = [];
      } catch (e) {
        statusDiv.textContent = '本同期に失敗しました: ' + e.message;
      } finally {
        syncBtn.disabled = true;
        dryRunBtn.disabled = false;
      }
    };
  </script>
</body>
</html>
`;

  return {
    statusCode: 200,
    headers: { 'Content-Type': 'text/html' },
    body: html
  };
};
